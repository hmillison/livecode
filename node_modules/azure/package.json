{
  "name": "azure",
  "author": {
    "name": "Microsoft Corporation"
  },
  "contributors": [
    {
      "name": "Block, Glenn",
      "email": "gblock@microsoft.com"
    },
    {
      "name": "Cowlishaw, Mark",
      "email": "markcowl@microsoft.com"
    },
    {
      "name": "Dejardin, Louis",
      "email": "loudej@microsoft.com"
    },
    {
      "name": "Georgiev, Yavor",
      "email": "yavorg@microsoft.com"
    },
    {
      "name": "Janczuk, Tomasz",
      "email": "tjanczuk@microsoft.com"
    },
    {
      "name": "Rodrigues, Andre",
      "email": "andrerod@microsoft.com"
    },
    {
      "name": "Tavares, Chris",
      "email": "ctavares@microsoft.com"
    },
    {
      "name": "Zavery, Amar",
      "email": "amzavery@microsoft.com"
    },
    {
      "name": "Wang, Yugang",
      "email": "yugangw@microsoft.com"
    },
    {
      "name": "Mkrtchyan, Hovsep",
      "email": "hovsepm@microsoft.com"
    },
    {
      "name": "Lu, Jianghao",
      "email": "jianghlu@microsoft.com"
    }
  ],
  "version": "0.9.15",
  "description": "Microsoft Azure Client Library for node",
  "tags": [
    "azure",
    "sdk"
  ],
  "keywords": [
    "node",
    "azure"
  ],
  "main": "./lib/azure.js",
  "engines": {
    "node": ">= 0.6.15"
  },
  "licenses": [
    {
      "type": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0"
    }
  ],
  "dependencies": {
    "azure-common": "0.9.7",
    "azure-storage-legacy": "0.9.10",
    "azure-mgmt-compute": "0.9.10",
    "azure-mgmt": "0.9.10",
    "azure-mgmt-vnet": "0.9.10",
    "azure-mgmt-sb": "0.9.10",
    "azure-mgmt-sql": "0.9.10",
    "azure-mgmt-storage": "0.9.10",
    "azure-mgmt-website": "0.9.10",
    "azure-rm-website": "0.9.0-pre.4",
    "azure-mgmt-subscription": "0.9.10",
    "azure-monitoring": "0.9.1-pre.10",
    "azure-scheduler": "0.9.1-pre.10",
    "azure-mgmt-scheduler": "0.9.1-pre.10",
    "azure-mgmt-resource": "2.0.0-pre.10",
    "azure-gallery": "2.0.0-pre.9",
    "azure-mgmt-hdinsight": "0.9.10",
    "azure-sb": "0.9.11",
    "mime": "~1.2.4",
    "underscore": "1.4.x",
    "request": "2.27.0",
    "node-uuid": "~1.2.0"
  },
  "devDependencies": {
    "mocha": "1.16.0",
    "jshint": ">= 2.1.4",
    "sinon": "*",
    "should": "1.2.x",
    "nock": "0.30.1",
    "grunt": "~0.4.2",
    "grunt-jsdoc": "~0.5.1",
    "grunt-devserver": "~0.4.1"
  },
  "homepage": "http://github.com/Azure/azure-sdk-for-node",
  "repository": {
    "type": "git",
    "url": "git@github.com:Azure/azure-sdk-for-node.git"
  },
  "bugs": {
    "url": "http://github.com/Azure/azure-sdk-for-node/issues"
  },
  "scripts": {
    "test": "npm -s run-script jshint && npm -s run-script unit",
    "unit": "node scripts/unit.js testlist.txt",
    "setup": "node scripts/setup.js",
    "update": "node scripts/update.js",
    "jshint": "jshint lib --reporter=jslint",
    "ci": "node scripts/unit.js testlist.txt",
    "coverage": "node scripts/unit.js testlist.txt -coverage > coverage.html"
  },
  "readme": "# Microsoft Azure SDK for Node.js\r\n\r\n[![NPM version](https://badge.fury.io/js/azure.png)](http://badge.fury.io/js/azure) [![Build Status](https://travis-ci.org/Azure/azure-sdk-for-node.png?branch=master)](https://travis-ci.org/Azure/azure-sdk-for-node)\r\n\r\nThis project provides a Node.js package that makes it easy to consume and manage Microsoft Azure Services.\r\n\r\n# Features\r\n\r\n* Storage\r\n    * Blob\r\n    * Table\r\n    * Storage Queue\r\n* Service Bus\r\n    * Queue\r\n    * Topic\r\n    * Notification Hub\r\n* Service Runtime\r\n* [Core management](https://github.com/Azure/azure-sdk-for-node/blob/master/lib/services/management/README.md)\r\n* [Compute management](https://github.com/Azure/azure-sdk-for-node/blob/master/lib/services/computeManagement/README.md)\r\n    * Virtual Machine\r\n    * Cloud Service\r\n* [Web Site management](https://github.com/Azure/azure-sdk-for-node/blob/master/lib/services/webSiteManagement/README.md)\r\n* [Virtual Network managment](https://github.com/Azure/azure-sdk-for-node/blob/dev/lib/services/networkManagement/README.md)\r\n* [Storage Account management](https://github.com/Azure/azure-sdk-for-node/blob/master/lib/services/storageManagement/README.md)\r\n* [SQL Database management](https://github.com/Azure/azure-sdk-for-node/blob/master/lib/services/sqlManagement/README.md)\r\n* [Service Bus management](https://github.com/Azure/azure-sdk-for-node/blob/master/lib/services/serviceBusManagement/README.md)\r\n* HDInsight management\r\n\r\n# Getting Started\r\n\r\n## Install from npm\r\n\r\nWe provide both fine-grained modules for different Microsoft Azure services which you can install separately, and an all-up module which contains everything.\r\n\r\n**Notice**: we haven't provided fine-grained modules for every supported Microsoft Azure services yet. This will come soon.\r\n\r\n### Install the all-up module\r\n\r\n```\r\nnpm install azure\r\n```\r\n\r\n### Install the fine-grained modules\r\n\r\n* Core management: ``npm install azure-mgmt``\r\n* Compute management: ``npm install azure-mgmt-compute``\r\n* Web Site management: ``npm install azure-mgmt-website``\r\n* Virtual Network managment: ``npm install azure-mgmt-vnet``\r\n* Storage Account management: ``npm install azure-mgmt-storage``\r\n* SQL Database management: ``npm install azure-mgmt-sql``\r\n* Service Bus management: ``npm install azure-mgmt-sb``\r\n\r\n## Usage\r\n\r\n### Table Storage\r\n\r\nTo ensure a table exists, call **createTableIfNotExists**:\r\n\r\n```Javascript\r\nvar tableService = azure.createTableService();\r\ntableService.createTableIfNotExists('tasktable', function(error){\r\n    if(!error){\r\n        // Table exists\r\n    }\r\n});\r\n```\r\nA new entity can be added by calling **insertEntity**:\r\n\r\n```Javascript\r\nvar tableService = azure.createTableService(),\r\n    task1 = {\r\n        PartitionKey : 'tasksSeattle',\r\n        RowKey: '1',\r\n        Description: 'Take out the trash',\r\n        DueDate: new Date(2011, 12, 14, 12)\r\n    };\r\ntableService.insertEntity('tasktable', task1, function(error){\r\n    if(!error){\r\n        // Entity inserted\r\n    }\r\n});\r\n```\r\n\r\nThe method **queryEntity** can then be used to fetch the entity that was just inserted:\r\n\r\n```Javascript\r\nvar tableService = azure.createTableService();\r\ntableService.queryEntity('tasktable', 'tasksSeattle', '1', function(error, serverEntity){\r\n    if(!error){\r\n        // Entity available in serverEntity variable\r\n    }\r\n});\r\n```\r\n\r\n## Blob Storage\r\n\r\nThe **createContainerIfNotExists** method can be used to create a\r\ncontainer in which to store a blob:\r\n\r\n```Javascript\r\nvar blobService = azure.createBlobService();\r\nblobService.createContainerIfNotExists('taskcontainer', {publicAccessLevel : 'blob'}, function(error){\r\n    if(!error){\r\n        // Container exists and is public\r\n    }\r\n});\r\n```\r\n\r\nTo upload a file (assuming it is called task1-upload.txt and it is placed in the same folder as the script below), the method **createBlob** can be used. This method will return a writable stream which can be writen to, for instance, through piping:\r\n\r\n```Javascript\r\nvar blobService = azure.createBlobService();\r\n\r\nfs.createReadStream('task1-upload.txt').pipe(blobService.createBlob('taskcontainer', 'task1', azure.Constants.BlobConstants.BlobTypes.BLOCK));\r\n```\r\n\r\nTo download the blob and write it to the file system, a similar **getBlob** method can be used:\r\n\r\n```Javascript\r\nvar blobService = azure.createBlobService();\r\n\r\nblobService.getBlob('taskcontainer', 'task1').pipe(fs.createWriteStream('task1-download.txt'));\r\n```\r\n\r\nTo create a SAS URL you can use the **getBlobUrl** method. Additionally you can use the **date** helper functions to easily create a SAS that expires at some point relative to the current time.\r\n\r\n```Javascript\r\nvar blobService = azure.createBlobService();\r\n\r\n//create a SAS that expires in an hour\r\nvar sharedAccessPolicy = {\r\n    AccessPolicy: {\r\n        Expiry: azure.date.minutesFromNow(60);\r\n    }\r\n};\r\n\r\nvar sasUrl = blobService.getBlobUrl(containerName, blobName, sharedAccessPolicy);\r\n```\r\n\r\n## Storage Queues\r\n\r\nThe **createQueueIfNotExists** method can be used to ensure a queue exists:\r\n\r\n```Javascript\r\nvar queueService = azure.createQueueService();\r\nqueueService.createQueueIfNotExists('taskqueue', function(error){\r\n    if(!error){\r\n        // Queue exists\r\n    }\r\n});\r\n```\r\n\r\nThe **createMessage** method can then be called to insert the message into the queue:\r\n\r\n```Javascript\r\nvar queueService = azure.createQueueService();\r\nqueueService.createMessage('taskqueue', 'Hello world!', function(error){\r\n    if(!error){\r\n        // Message inserted\r\n    }\r\n});\r\n```\r\n\r\nIt is then possible to call the **getMessage** method, process the message and then call **deleteMessage** inside the callback. This two-step process ensures messages don't get lost when they are removed from the queue.\r\n\r\n```Javascript\r\nvar queueService = azure.createQueueService(),\r\n    queueName = 'taskqueue';\r\nqueueService.getMessages(queueName, function(error, serverMessages){\r\n    if(!error){\r\n        // Process the message in less than 30 seconds, the message\r\n        // text is available in serverMessages[0].messagetext\r\n\r\n        queueService.deleteMessage(queueName, serverMessages[0].messageid, serverMessages[0].popreceipt, function(error){\r\n            if(!error){\r\n                // Message deleted\r\n            }\r\n        });\r\n    }\r\n});\r\n```\r\n\r\n## Service Bus Queues\r\n\r\nService Bus Queues are an alternative to Storage Queues that might be useful in scenarios where more advanced messaging features are needed (larger message sizes, message ordering, single-operaiton destructive reads, scheduled delivery) using push-style delivery (using long polling).\r\n\r\nThe **createQueueIfNotExists** method can be used to ensure a queue exists:\r\n\r\n```Javascript\r\nvar serviceBusService = azure.createServiceBusService();\r\nserviceBusService.createQueueIfNotExists('taskqueue', function(error){\r\n    if(!error){\r\n        // Queue exists\r\n    }\r\n});\r\n```\r\n\r\nThe **sendQueueMessage** method can then be called to insert the message into the queue:\r\n\r\n```Javascript\r\nvar serviceBusService = azure.createServiceBusService();\r\nserviceBusService.sendQueueMessage('taskqueue', 'Hello world!', function(\r\n    if(!error){\r\n        // Message sent\r\n     }\r\n});\r\n```\r\n\r\nIt is then possible to call the **receiveQueueMessage** method to dequeue the message.\r\n\r\n```Javascript\r\nvar serviceBusService = azure.createServiceBusService();\r\nserviceBusService.receiveQueueMessage('taskqueue', function(error, serverMessage){\r\n    if(!error){\r\n        // Process the message\r\n    }\r\n});\r\n```\r\n\r\n## Service Bus Topics\r\n\r\nService Bus topics are an abstraction on top of Service Bus Queues that make pub/sub scenarios easy to implement.\r\n\r\nThe **createTopicIfNotExists** method can be used to create a server-side topic:\r\n\r\n```Javascript\r\nvar serviceBusService = azure.createServiceBusService();\r\nserviceBusService.createTopicIfNotExists('taskdiscussion', function(error){\r\n    if(!error){\r\n        // Topic exists\r\n    }\r\n});\r\n```\r\n\r\nThe **sendTopicMessage** method can be used to send a message to a topic:\r\n\r\n```Javascript\r\nvar serviceBusService = azure.createServiceBusService();\r\nserviceBusService.sendTopicMessage('taskdiscussion', 'Hello world!', function(error){\r\n    if(!error){\r\n        // Message sent\r\n    }\r\n});\r\n```\r\n\r\nA client can then create a subscription and start consuming messages by calling the **createSubscription** method followed by the **receiveSubscriptionMessage** method. Please note that any messages sent before the subscription is created will not be received.\r\n\r\n```Javascript\r\nvar serviceBusService = azure.createServiceBusService(),\r\n    topic = 'taskdiscussion',\r\n    subscription = 'client1';\r\n\r\nserviceBusService.createSubscription(topic, subscription, function(error1){\r\n    if(!error1){\r\n        // Subscription created\r\n\r\n        serviceBusService.receiveSubscriptionMessage(topic, subscription, function(error2, serverMessage){\r\n            if(!error2){\r\n                // Process message\r\n            }\r\n        });\r\n     }\r\n});\r\n```\r\n\r\n\r\n## Notification Hubs\r\n\r\nNotification hubs allow you to send notifications to WNS, APNS, GCM, and MPNS receivers.\r\n\r\nTo create a notification hub, use the method **createNotificationHub**.\r\n\r\n```JavaScript\r\nvar serviceBusService = azure.createServiceBusService();\r\n\r\nserviceBusService.createNotificationHub('hubName', function (err) {\r\n    if (!err) {\r\n        // Notification hub created successfully\r\n    }\r\n});\r\n```\r\n\r\nTo send notification using native format to the notification hub use the methods of the **wns**, **apns**, **gcm**, **mpns** objects. For a full reference on WNS method templates, check http://msdn.microsoft.com/en-us/library/windows/apps/hh779725.aspx.\r\nTo send template (cross-platform) notifications use the send method on the **NotificationHubService** class.\r\n\r\n```JavaScript\r\nvar notificationHubService = azure.createNotificationHubService('hubName');\r\n\r\n// WNS notification\r\nnotificationHubService.wns.sendTileSquarePeekImageAndText01(\r\n    null,\r\n    {\r\n        image1src: 'http://foobar.com/dog.jpg',\r\n        image1alt: 'A dog',\r\n        text1: 'This is a dog',\r\n        text2: 'The dog is nice',\r\n        text3: 'The dog bites',\r\n        text4: 'Beware of dog'\r\n    },\r\n    function (error) {\r\n        if (!error) {\r\n            // message sent successfully\r\n        }\r\n    });\r\n\r\n// APNS notification\r\nnotificationHubService.apns.send(\r\n    null,\r\n    {\r\n        alert: 'This is my toast message for iOS!',\r\n        expiry: expiryDate\r\n    },\r\n    function (error) {\r\n        if (!error) {\r\n            // message sent successfully\r\n        }\r\n    });\r\n\r\n// GCM notification\r\nnotificationHubService.gcm.send(\r\n    null,\r\n    {\r\n        data: { message: 'Here is a message' }\r\n    },\r\n    function (error) {\r\n        if (!error) {\r\n            //message send successfully\r\n        }\r\n    });\r\n\r\n// MPNS notification\r\nnotificationHubService.mpns.sendToast(\r\n    null,\r\n    {\r\n        text1: 'A dog',\r\n        text2: 'This is a dog'\r\n    },\r\n    function (error) {\r\n        if (!error) {\r\n            //message send successfully\r\n        }\r\n    });\r\n\r\n// template notification\r\nnotificationHubService.send(\r\n    null,\r\n    {\r\n        message: 'This is my template notification',\r\n        goesTo: 'all registrations irrespective of the platform'\r\n    },\r\n    function (error) {\r\n        if (!error) {\r\n            //message send successfully\r\n        }\r\n    });\r\n\r\n```\r\n\r\nTo create registrations (for both native and template notifications), use the creation methods in the **wns**, **apns**, **gcm**, **mpns**. To retrieve, update and delete existing registrations, use the following methods in NotificationHubService: **getRegistration**, **listRegistrations**, **listRegistrationsByTag**, **updateRegistration**, and **deleteRegistration**.\r\n\r\n## Service Runtime\r\n\r\nThe Service Runtime allows you to interact with the machine environment where the current role is running. Please note that these commands will only work if your code is running in a worker role inside the Azure emulator or in the cloud.\r\n\r\nThe **isAvailable** method lets you determine whether the service runtime endpoint is running on the local machine.  It is good practice to enclose any code that\r\nuses service runtime in the isAvailable callback.\r\n\r\n```JavaScript\r\nazure.RoleEnvironment.isAvailable(function(error, available) {\r\n    if (available) {\r\n        // Place your calls to service runtime here\r\n    }\r\n});\r\n```\r\n\r\nThe **getConfigurationSettings** method lets you obtain values from the role's .cscfg file.\r\n\r\n```Javascript\r\nazure.RoleEnvironment.getConfigurationSettings(function(error, settings) {\r\n    if (!error) {\r\n        // You can get the value of setting \"setting1\" via settings['setting1']\r\n    }\r\n});\r\n```\r\n\r\nThe **getLocalResources** method lets you find the path to defined local storage resources for the current role.  For example, the DiagnosticStore\r\nresource which is defined for every role provides a location for runtime diagnostics and logs.\r\n\r\n```Javascript\r\nazure.RoleEnvironment.getLocalResources(function(error, resources) {\r\n    if(!error){\r\n        // You can get the path to the role's diagnostics store via\r\n        // resources['DiagnosticStore']['path']\r\n    }\r\n});\r\n```\r\n\r\nThe **getCurrentRoleInstance** method lets you obtain information about endpoints defined for the current role instance:\r\n\r\n```JavaScript\r\nazure.RoleEnvironment.getCurrentRoleInstance(function(error, instance) {\r\n    if (!error && instance['endpoints']) {\r\n        // You can get information about \"endpoint1\" such as its address and port via\r\n        // instance['endpoints']['endpoint1']['address'] and instance['endpoints']['endpoint1']['port']\r\n    }\r\n});\r\n```\r\n\r\nThe **getRoles** method lets you obtain information about endpoints in role instances running on other machines:\r\n\r\n```Javascript\r\nazure.RoleEnvironment.getRoles(function(error, roles) {\r\n    if(!error){\r\n        // You can get information about \"instance1\" of \"role1\" via roles['role1']['instance1']\r\n    }\r\n});\r\n```\r\n\r\n# Need Help?\r\n\r\n* [Microsoft Azure Forums on MSDN and Stack Overflow](http://go.microsoft.com/fwlink/?LinkId=234489)\r\n* IRC channel on freenode: node-azure\r\n\r\n# Learn More\r\n\r\n* [Microsoft Azure Node.js Developer Center](http://azure.microsoft.com/en-us/develop/nodejs/)\r\n* [API reference](http://dl.windowsazure.com/nodedocs/)\r\n* [Microsoft Azure Cross-Platform CLI](http://github.com/azure/azure-sdk-tools-xplat)\r\n\r\n# Contribute\r\n\r\n* If you would like to become an active contributor to this project please follow the instructions provided in [Microsoft Azure Projects Contribution Guidelines](http://azure.github.com/guidelines.html).\r\n* If you encounter any bugs with the library please file an issue in the [Issues](https://github.com/Azure/azure-sdk-for-node/issues) section of the project.\r\n",
  "readmeFilename": "README.md",
  "_id": "azure@0.9.15",
  "dist": {
    "shasum": "ffd725c2309f25cc34a104b66d787bda29700691"
  },
  "_from": "azure@",
  "_resolved": "https://registry.npmjs.org/azure/-/azure-0.9.15.tgz"
}
